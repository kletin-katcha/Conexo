// =================================================================================
//  CONECTARE - CHAT JAVASCRIPT FILE
//  Author: Gemini (adaptado da sua vers√£o funcional)
//  Description: Client-side logic for the chat functionality, including bot responses,
//               typing indicator, and message status (sent, delivered, read),
//               agora com um layout inspirado no Discord para a lista de amigos,
//               e funcionalidades de anexar arquivos, enviar emojis e GIFs.
//               NOVIDADE: Mensagens de voz simuladas e status de "Visto por √öltimo".
//               REVIS√ÉO: Sistema de emoji completamente refeito para ser mais interativo.
// =================================================================================

// Objeto global Chat para encapsular a l√≥gica
const Chat = {
    // Refer√™ncias para os elementos DOM
    messagesContainer: null,
    messageInput: null,
    sendMessageBtn: null,
    emojiToggleBtn: null,
    emojiPicker: null, // Agora √© o container principal do picker
    closeEmojiPickerBtn: null, // Novo bot√£o de fechar
    emojiSearchInput: null, // Novo input de busca
    emojiCategoriesNav: null, // Nova navega√ß√£o de categorias
    emojiGridContainer: null, // Novo container para as grades de emoji

    chatWindow: null, // A janela de chat completa
    chatPartnerImage: null,
    chatPartnerName: null,
    chatPartnerStatus: null,
    noChatSelectedMessage: null, // Mensagem "Selecione um amigo"

    directMessagesList: null, // Lista para mensagens diretas
    friendSearchInput: null,

    friendsHeaderTitle: null, // T√≠tulo "Amigos"

    typingIndicator: null,

    // Refer√™ncias para o modal de todos os amigos
    allFriendsModal: null,
    modalOnlineFriendsList: null,
    modalOfflineFriendsList: null,

    // Refer√™ncias para o GIF Picker
    gifToggleBtn: null,
    gifPickerModal: null,
    closeGifPickerBtn: null,
    gifSearchInput: null,
    gifResultsContainer: null,
    gifLoadingMessage: null,
    gifNoResultsMessage: null,

    // Refer√™ncias para anexar arquivos
    fileAttachmentBtn: null,
    fileAttachmentInput: null,

    // Refer√™ncias para o menu de op√ß√µes do chat e modal de confirma√ß√£o
    moreOptionsBtn: null,
    chatOptionsMenu: null,
    clearChatBtn: null,
    clearChatConfirmationModal: null,
    confirmClearChatBtn: null,
    cancelClearChatBtn: null,
    clearChatConfirmModalCloseBtn: null,

    // NOVO: Refer√™ncias para mensagem de voz
    voiceMessageBtn: null,
    voiceRecordingIndicator: null,
    recordingTimerDisplay: null,
    isRecordingVoice: false,
    recordingStartTime: 0,
    recordingInterval: null,

    // Giphy API Key (Substitua por sua chave real do Giphy Developers)
    GIPHY_API_KEY: 'B8JjBSTQaX5Rjf4RarsxK1Kj96N3r0NA', // <-- CHAVE REAL INSERIDA AQUI

    // Dados de emojis organizados por categoria
    emojiData: {
        'smileys': {
            icon: 'üòÄ',
            title: 'Smileys & Emo√ß√£o',
            emojis: ['üòÄ', 'üòÇ', 'üòç', 'ü§©', 'üòé', 'ü•≥', 'ü§î', 'üëç', 'üëé', 'üëè', 'üòä', 'üòá', 'ü•∞', 'üòò', 'ü§ó', 'üòè', 'üòê', 'üòë', 'üòí', 'üôÑ', 'üòî', 'üò™', 'ü§§', 'üò¥', 'üò∑', 'ü§í', 'ü§ï', 'ü§¢', 'ü§Æ', 'ü§ß', 'ü•µ', 'ü•∂', 'ü•¥', 'üòµ', 'ü§Ø', 'ü§†', 'ü•≥', 'ü•∏', 'ü•∫', 'üò§', 'üò†', 'üò°', 'ü§¨', 'üòà', 'üëø', 'üíÄ', 'üëª', 'üëΩ', 'ü§ñ', 'üí©']
        },
        'people': {
            icon: 'üëã',
            title: 'Pessoas',
            emojis: ['üëã', 'üôè', 'üí™', 'üö∂', 'üèÉ', 'üíÉ', 'üï∫', 'üëØ', 'üë´', 'üë¨', 'üë≠', 'üßë‚Äçü§ù‚Äçüßë', 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶', 'üë©‚Äçüë©‚Äçüëß‚Äçüë¶', 'üë®‚Äçüë®‚Äçüëß‚Äçüë¶', 'üë∂', 'üëß', 'üë¶', 'üë©', 'üë®', 'üëµ', 'üë¥', 'üë±‚Äç‚ôÄÔ∏è', 'üë±‚Äç‚ôÇÔ∏è', 'üëÆ‚Äç‚ôÄÔ∏è', 'üëÆ‚Äç‚ôÇÔ∏è', 'üë∑‚Äç‚ôÄÔ∏è', 'üë∑‚Äç‚ôÇÔ∏è', 'üë©‚Äç‚öïÔ∏è', 'üë®‚Äç‚öïÔ∏è', 'üë©‚Äçüéì', 'üë®‚Äçüéì', 'üë©‚Äçüè´', 'üë®‚Äçüè´', 'üë©‚Äçüåæ', 'üë®‚Äçüåæ', 'üë©‚Äçüç≥', 'üë®‚Äçüç≥', 'üë©‚Äçüé§', 'üë®‚Äçüé§', 'üë©‚ÄçÔøΩ', 'üë®‚Äçüé®', 'üë©‚Äç‚úàÔ∏è', 'üë®‚Äç‚úàÔ∏è', 'üë©‚ÄçüöÄ', 'üë®‚ÄçüöÄ', 'üë©‚Äçüöí', 'üë®‚Äçüöí', 'üïµÔ∏è‚Äç‚ôÄÔ∏è', 'üïµÔ∏è‚Äç‚ôÇÔ∏è', 'üíÇ‚Äç‚ôÄÔ∏è', 'üíÇ‚Äç‚ôÇÔ∏è', 'üßï', 'üßë‚Äçü¶±', 'üßë‚Äçü¶∞', 'üßë‚Äçü¶≥', 'üßë‚Äçü¶≤', 'ü§µ', 'üë∞', 'ü§∞', 'ü§±', 'üëº', 'üéÖ', 'ü§∂', 'ü¶∏‚Äç‚ôÄÔ∏è', 'ü¶∏‚Äç‚ôÇÔ∏è', 'ü¶π‚Äç‚ôÄÔ∏è', 'ü¶π‚Äç‚ôÇÔ∏è', 'üßô‚Äç‚ôÄÔ∏è', 'üßô‚Äç‚ôÇÔ∏è', 'üßö‚Äç‚ôÄÔ∏è', 'üßö‚Äç‚ôÇÔ∏è', 'üßõ‚Äç‚ôÄÔ∏è', 'üßõ‚Äç‚ôÇÔ∏è', 'üßú‚Äç‚ôÄÔ∏è', 'üßú‚Äç‚ôÇÔ∏è', 'üßù‚Äç‚ôÄÔ∏è', 'üßù‚Äç‚ôÇÔ∏è', 'üßû‚Äç‚ôÄÔ∏è', 'üßû‚Äç‚ôÇÔ∏è', 'üßü‚Äç‚ôÄÔ∏è', 'üßü‚Äç‚ôÇÔ∏è']
        },
        'animals': {
            icon: 'üê∂',
            title: 'Animais & Natureza',
            emojis: ['üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ', 'ü¶Å', 'üêÆ', 'üê∑', 'üê∏', 'üêµ', 'üêî', 'üêß', 'üê¶', 'ü¶ã', 'üêù', 'üêû', 'üê†', 'üê≥', 'üê¨', 'üê¢', 'üêç', 'ü¶é', 'ü¶ñ', 'ü¶ï', 'üï∑Ô∏è', 'üï∏Ô∏è', 'üå∏', 'üåπ', 'üå∫', 'üåª', 'üåº', 'üå≥', 'üå≤', 'üå¥', 'üåµ', 'üåæ', 'üçÑ', 'üçÇ', 'üçÅ', 'üåç', 'üåé', 'üåè', 'üåï', 'üåñ', 'üåó', 'üåò', 'üåë', 'üåí', 'üåì', 'üåî', 'üåô', '‚≠êÔ∏è', 'üåü', 'üí´', '‚ú®', '‚ö°', 'üî•', 'üí•', '‚òÑÔ∏è', '‚òÄÔ∏è', 'üåà', 'üåßÔ∏è', '‚òÅÔ∏è', '‚òî', 'üåä', 'üå¨Ô∏è', 'üå™Ô∏è', 'üå´Ô∏è', 'üíß', 'üí¶']
        },
        'food': {
            icon: 'üçï',
            title: 'Comida & Bebida',
            emojis: ['üçï', 'üçî', 'üçü', 'üå≠', 'üçø', 'üåÆ', 'üåØ', 'ü•ô', 'üçù', 'üçú', 'üç≤', 'üç£', 'üç§', 'üçö', 'üçô', 'üçû', 'ü•ê', 'ü•ñ', 'üßÄ', 'ü•ö', 'üç≥', 'ü•ì', 'ü•©', 'üçó', 'üçé', 'üçè', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'üçí', 'üçë', 'üçç', 'ü•ù', 'ü•ë', 'üçÜ', 'ü•î', 'ü•ï', 'üåΩ', 'üå∂Ô∏è', 'üçÑ', 'üå∞', 'ü•ú', 'üçØ', 'ü•õ', '‚òï', 'üçµ', 'üç∂', 'üçæ', 'üç∑', 'üç∏', 'üçπ', 'üç∫', 'üçª', 'ü•Ç', 'ü•É', 'ü•§']
        },
        'activities': {
            icon: '‚öΩ',
            title: 'Atividades',
            emojis: ['‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'üéæ', 'üèê', 'üèâ', 'üé±', 'üèì', 'üè∏', 'üèí', 'ü•Ö', '‚õ≥', 'üéØ', 'üèπ', 'üé£', 'ü•ä', 'ü•ã', '‚õ∏Ô∏è', '‚õ∑Ô∏è', 'üèÇ', 'üèãÔ∏è‚Äç‚ôÄÔ∏è', 'üèãÔ∏è‚Äç‚ôÇÔ∏è', 'ü§∏‚Äç‚ôÄÔ∏è', 'ü§∏‚Äç‚ôÇÔ∏è', '‚õπÔ∏è‚Äç‚ôÄÔ∏è', '‚õπÔ∏è‚Äç‚ôÇÔ∏è', 'ü§∫', 'ü§º‚Äç‚ôÄÔ∏è', 'ü§º‚Äç‚ôÇÔ∏è', 'ü§Ω‚Äç‚ôÄÔ∏è', 'ü§Ω‚Äç‚ôÇÔ∏è', 'üö¥‚Äç‚ôÄÔ∏è', 'üö¥‚Äç‚ôÇÔ∏è', 'üöµ‚Äç‚ôÄÔ∏è', 'üöµ‚Äç‚ôÇÔ∏è', 'üèá', 'üèåÔ∏è‚Äç‚ôÄÔ∏è', 'üèåÔ∏è‚Äç‚ôÇÔ∏è', 'üèÑ‚Äç‚ôÄÔ∏è', 'üèÑ‚Äç‚ôÇÔ∏è', 'üö£‚Äç‚ôÄÔ∏è', 'üö£‚Äç‚ôÇÔ∏è', 'üèä‚Äç‚ôÄÔ∏è', 'üèä‚Äç‚ôÇÔ∏è', 'üßú‚Äç‚ôÄÔ∏è', 'üßú‚Äç‚ôÇÔ∏è', 'üéÆ', 'üïπÔ∏è', 'üé≤', 'üß©', 'üé≠', 'üé®', 'üßµ', 'üß∂', 'üéº', 'üéµ', 'üé∂', 'üé§', 'üéß', 'ü•Å', 'üé∑', 'üé∫', 'üé∏', 'üéª', 'üéπ', 'üé¨', 'üé™', 'üé´', 'üèÜ', 'üèÖ', 'üéñÔ∏è', 'üéóÔ∏è', 'üéÅ', 'üéà', 'üéâ', 'üéä', 'üéÄ', 'ü™Ñ', 'üîÆ']
        },
        'travel': {
            icon: '‚úàÔ∏è',
            title: 'Viagens & Lugares',
            emojis: ['‚úàÔ∏è', 'üöÄ', 'üõ∏', 'üõ∞Ô∏è', 'üöÅ', 'üöÇ', 'üöÉ', 'üöÑ', 'üöÖ', 'üöÜ', 'üöá', 'üöà', 'üöâ', 'üöå', 'üöç', 'üöé', 'üöê', 'üöë', 'üöí', 'üöì', 'üöî', 'üöï', 'üöñ', 'üöó', 'üöò', 'üöô', 'üöö', 'üöõ', 'üöú', 'üö≤', 'üõµ', 'üèçÔ∏è', 'üõ£Ô∏è', 'üõ§Ô∏è', 'üåâ', 'tunnel', 'ferry', 'boat', 'üö¢', '‚öì', '‚õµ', 'üó∫Ô∏è', 'üß≠', 'üè®', 'motel', 'bed', 'building', 'house', 'cityscape', 'sunrise', 'sunset']
        },
        'objects': {
            icon: 'üí°',
            title: 'Objetos',
            emojis: ['üí°', 'üì±', 'üíª', 'üñ•Ô∏è', '‚å®Ô∏è', 'üñ±Ô∏è', 'üñ®Ô∏è', 'üíæ', 'üíø', 'üìÄ', 'üîã', 'üîå', 'üí°', 'üî¶', 'üïØÔ∏è', 'üóëÔ∏è', 'üõ¢Ô∏è', 'üí∏', 'üí∞', 'üí≥', 'üíé', '‚öñÔ∏è', 'üî®', '‚õèÔ∏è', 'üîß', 'üî©', '‚öôÔ∏è', '‚õìÔ∏è', 'üî™', 'üó°Ô∏è', 'üî´', 'üõ°Ô∏è', 'üö¨', '‚ö∞Ô∏è', '‚ö±Ô∏è', 'üè∫', 'üíà', '‚öóÔ∏è', 'üî≠', 'üî¨', 'üï≥Ô∏è', 'üíä', 'ü©π', 'üíâ', 'ü©∏', 'üß¨', 'ü¶†', 'üß™', 'üå°Ô∏è', 'üöΩ', 'üöø', 'üõÅ', 'üßº', 'ü™•', 'ü™í', 'üß¥', 'üß∑', 'üßπ', 'üß∫', 'üßª', 'ü™£', 'ü™†', 'üõéÔ∏è', 'üîë', 'üóùÔ∏è', 'üö™', 'ü™ë', 'üõãÔ∏è', 'üõèÔ∏è', 'üõå', 'üñºÔ∏è', 'mirror', 'window', 'umbrella', 'bag', 'purse', 'wallet', 'luggage']
        },
        'symbols': {
            icon: '‚ù§Ô∏è',
            title: 'S√≠mbolos',
            emojis: ['‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'üñ§', 'ü§ç', 'ü§é', 'üíî', '‚ù£Ô∏è', 'üíï', 'üíû', 'üíì', 'üíó', 'üíñ', 'üíò', 'üíù', '‚ú®', 'üí´', 'üí•', 'üî•', 'üíØ', '‚úÖ', '‚òëÔ∏è', '‚úîÔ∏è', '‚ùå', '‚ùé', '‚úñÔ∏è', '‚ùì', '‚ùî', '‚ùï', '‚ùó', '‚ÅâÔ∏è', '‚Äº', '‚¨ÜÔ∏è', '‚ÜóÔ∏è', '‚û°Ô∏è', '‚ÜòÔ∏è', '‚¨áÔ∏è', '‚ÜôÔ∏è', '‚¨ÖÔ∏è', '‚ÜñÔ∏è', '‚ÜïÔ∏è', '‚ÜîÔ∏è', '‚Ü©Ô∏è', '‚Ü™Ô∏è', '‚§¥Ô∏è', '‚§µÔ∏è', 'üîÉ', 'üîÑ', 'üîô', 'üîö', 'üîõ', 'üîú', 'üîù', 'üõê', '‚öõÔ∏è', 'üïâÔ∏è', '‚ú°Ô∏è', '‚ò∏Ô∏è', '‚òØÔ∏è', '‚úùÔ∏è', '‚ò¶Ô∏è', '‚ò™Ô∏è', '‚òÆÔ∏è', 'üïé', 'üîØ', '‚ôà', '‚ôâ', '‚ôä', '‚ôã', '‚ôå', '‚ôç', '‚ôé', '‚ôè', '‚ôê', '‚ôë', '‚ôí', '‚ôì', '‚õé', '‚ôÄÔ∏è', '‚ôÇÔ∏è', '‚ößÔ∏è', '‚úñÔ∏è', '‚ûï', '‚ûñ', '‚ûó', '‚ôæÔ∏è', '¬©Ô∏è', '¬ÆÔ∏è', '‚Ñ¢Ô∏è', '„Ä∞Ô∏è', '„ÄΩÔ∏è', '‚ñ™Ô∏è', '‚ñ´Ô∏è', 'üî∫', 'üîª', 'üî≤', 'üî≥', '‚ö´', '‚ö™', 'üî¥', 'üîµ', 'üü©', 'üüß', 'üü®', 'üü¶', 'üü™', 'üü´', '‚¨õ', '‚¨ú']
        }
    },

    humorAtual: ['normal', 'engra√ßado', 'ranzinza'][Math.floor(Math.random() * ['normal', 'engra√ßado', 'ranzinza'].length)],

    // Dados dos amigos (substituindo 'conversas' por 'amigos' para melhor sem√¢ntica)
    amigos: {
        'ana': {
            name: 'Ana Livia',
            avatar: 'https://i.pinimg.com/736x/ad/b3/a9/adb3a95eb2128cd200d4f7c2d9c288e4.jpg',
            status: 'online', // online, offline, away, dnd
            lastSeen: 'Online', // Ser√° atualizado para hora ou "Online"
            messages: []
        },
        'carlos': {
            name: 'Carlos Souza',
            avatar: 'https://i.pinimg.com/736x/32/b5/17/32b51754e1496531c11a027c9a185d24.jpg',
            status: 'offline',
            lastSeen: 'Visto por √∫ltimo: 18:30', // Exemplo de "Visto por √∫ltimo"
            messages: []
        }
    },

    amigoAtivoId: null,

    // Dicion√°rios de respostas
    anaResponses: {
        'bom dia': ["Bom dia, tudo bem?", "Bom dia! Como voc√™ est√°?", "Bom dia!", "Oi, bom dia!"],
        'boa tarde': ["Boa tarde! Tudo tranquilo?", "Boa tarde! Como est√° sendo sua tarde?", "Boa tarde! Alguma novidade?"],
        'boa noite': ["Boa noite! Tudo em paz?", "Boa noite! Descansando j√°?", "Boa noite! Como foi o dia?"],
        'oi': ["Oi! Tudo bem?", "Ol√°! Como vai?", "E a√≠! Tudo em ordem?", "Oi! Que bom te ver por aqui!"],
        'ola': ["Oi! Tudo bem?", "Ol√°! Como vai?", "E a√≠! Tudo em ordem?", "Oi! Que bom te ver por aqui!"],
        'tudo bem': ["Tudo √≥timo por aqui! E com voc√™?", "Vou bem, obrigada! E voc√™, como est√°?", "Tudo tranquilo! E por a√≠, alguma novidade?", "Estou super bem! E voc√™, o que me conta de bom?"],
        'como vai': ["Tudo √≥timo por aqui! E com voc√™?", "Vou bem, obrigada! E voc√™, como est√°?", "Tudo tranquilo! E por a√≠, alguma novidade?", "Estou super bem! E voc√™, o que me conta de bom?"],
        'estou bem': ["Que bom! E voc√™?", "Que √≥timo! E por a√≠?", "Ah, que bom! E vc?", "Legal! E voc√™?"],
        'o que voce faz': ["Estou aqui, pronta pra conversar! E voc√™, o que est√° aprontando?", "No momento, estou focada em te dar a melhor experi√™ncia de chat! E voc√™?", "Estou sempre aprendendo e pronta para interagir! O que voc√™ est√° fazendo de bom?"],
        'o que esta fazendo': ["Estou aqui, pronta para conversar! E voc√™, o que est√° aprontando?", "No momento, estou focada em te dar a melhor experi√™ncia de chat! E voc√™?", "Estou sempre aprendendo e pronta para interagir! O que voc√™ est√° fazendo de bom?"],
        'ajuda': ["Claro! Diga-me o que voc√™ precisa.", "Posso tentar ajudar! Qual √© a sua d√∫vida?", "Conte comigo! No que posso ser √∫til?"],
        'obrigado': ["De nada!", "Disponha!", "Imagina! Fico feliz em ajudar."],
        'tchau': ["At√© mais!", "Tchau! Se cuida!", "At√© logo!"],
        'qual seu nome': ["Meu nome √© Ana Livia, prazer em te conhecer!", "Pode me chamar de Ana. E o seu?"],
        'piada': ["Por que o tomate n√£o anda de bicicleta? Porque ele refoga! üòÇ", "O que o pato disse para a pata? Vem Qu√°!", "Qual √© o animal mais antigo do mundo? A zebra, porque ela √© preta e branca!"],
        'filme': ['Ah, sim! Qual filme voc√™ est√° pensando em ver? Tenho algumas sugest√µes se quiser!', 'Filme √© sempre uma boa pedida! Me diz o que voc√™ gosta de assistir.'],
        'cinema': ['Cinema √© uma √≥tima ideia! Tem algum g√™nero que voc√™ prefere?', 'Adoro ir ao cinema! Qual filme est√° em cartaz que te interessa?'],
        'link': ['O link √© esse: [link fict√≠cio]. Me diz o que achou depois! Mal posso esperar pra saber sua opini√£o.', 'Aqui est√° o link: [link fict√≠cio]. Espero que seja √∫til!'],
        'marcar': ['Perfeito! Me avisa o dia e a hora que fica bom para voc√™. Podemos ver um filme ou s√≥ bater um papo.', '√ìtimo! Que dia e hora seriam bons para voc√™?'],
        'fim de semana': ['Sim! O que voc√™ tem em mente para o fim de semana? Adoro planejar algo divertido!', 'O fim de semana est√° chegando! Algum plano especial?'],
        'legal': ['Que bom que achou legal!', 'Fico feliz que tenha gostado!'],
        'default': ["N√£o entendi. Poderia reformular?", "Hmm, n√£o entendi. Pode repetir?", "Desculpe, n√£o peguei essa. Pode explicar melhor?", "N√£o entendi. O que voc√™ quis dizer?", "Pode me dar mais detalhes? N√£o entendi muito bem."]
    },
    carlosResponses: { // Renomeado para Carlos
        'bom dia': [
            "Bom dia!", "E a√≠, boa tarde.", "Bom diaaa ‚òÄÔ∏è", "Oi, bom dia! Tudo certo?",
            "Bom dia, dormiu bem?", "Bom dia! Acordou cedo hoje?", "Bom dia! J√° tomou caf√©?",
            "Bom dia! Bora come√ßar o dia?"
        ],
        'boa tarde': [
            "Boa tarde!", "E a√≠, boa tarde.", "Boa tarde! J√° almo√ßou?", "Oi! Boa tarde ‚òÄÔ∏è",
            "Boa tarde, tudo certo por a√≠?", "Boa tarde! Como t√° o dia?", "Boa tarde! Muito calor a√≠?",
            "Boa tarde, como vai?"
        ],
        'boa noite': [
            "Boa noite!", "Oi, boa noite.", "Boa noite! Descansando?", "Boa noite üåô",
            "Boa noite! Foi puxado o dia?", "Boa noite! J√° de pijama?", "Boa noite! At√© amanh√£."
        ],
        'oi': [
            "Oi!", "Oii", "E a√≠!", "Oi, tudo bem?", "Oi, sumido üòÑ", "Oi, como c√™ t√°?",
            "Oi, o que manda?", "Fala!"
        ],
        'ola': [
            "Ol√°!", "Oi!", "Oii", "E a√≠!", "Oi, tudo certo?"
        ],
        'tudo bem': [
            "Tudo sim, e contigo?", "Tudo tranquilo! E a√≠?", "T√¥ bem! E voc√™?",
            "Tudo certo por aqui.", "Na paz. E por a√≠?",
            "Tudo nos conformes!"
        ],
        'como vai': [
            "Vou bem, e voc√™?", "Tudo certo, e a√≠?", "Na correria, mas bem. E voc√™?",
            "T√¥ indo! E voc√™?", "T√¥ legal, e tu?"
        ],
        'estou bem': ["Que bom!", "Fico feliz üôÇ", "A√≠ sim!", "√ìtimo saber!", "Boa!", "Maravilha!",
            "Que not√≠cia boa!"
        ],
        'o que voce faz': [
            "Nada demais, e voc√™?", "T√¥ aqui de bobeira.", "S√≥ conversando por aqui.",
            "Tava esperando voc√™ aparecer.", "Passando o tempo, e voc√™?", "T√¥ online s√≥, e voc√™?",
            "T√¥ pensando na vida, haha."
        ],
        'o que esta fazendo': [
            "Nada demais, e voc√™?", "T√¥ aqui de bobeira.", "S√≥ conversando por aqui.",
            "Tava esperando voc√™ aparecer.", "Passando o tempo, e voc√™?", "T√¥ online s√≥, e voc√™?",
            "T√¥ pensando na vida, haha."
        ],
        'ajuda': [
            "Claro, no que posso ajudar?", "Manda a√≠!", "Pode falar, t√¥ aqui.",
            "T√¥ ouvindo, fala a√≠.", "Pode contar comigo!", "No que posso ser √∫til!"
        ],
        'obrigado': [
            "De nada!", "Imagina!", "Tamo junto!", "Disponha üôÇ", "√â n√≥is!", "Que nada!",
            "Fico feliz em ajudar!"
        ],
        'tchau': [
            "Tchau!", "Falou!", "At√© mais!", "Se cuida!", "Fui!", "A gente se fala!",
            "At√© a pr√≥xima!"
        ],
        'qual seu nome': [
            "Ah, meu nome? Eu sou s√≥ um bot üòÖ", "Pode me chamar de Chatzinho mesmo.",
            "Ainda n√£o tenho nome... me d√° um?", "Nome? Vixi, n√£o pensei nisso!",
            "Sou s√≥ eu mesmo, do outro lado da tela.", "N√£o tenho um nome formal, mas pode me chamar do que quiser!"
        ],
        'piada': [
            "Por que o l√°pis foi pro m√©dico? Porque ele tava sem ponta! üòÑ",
            "O que o zero disse pro oito? Que cinto maneiro! üòÇ",
            "Sabe por que o computador foi preso? Porque executou um programa!",
            "O que a impressora falou pra folha? T√° na minha!",
            "O que o pato disse para a pata? Vem Qu√°!",
            "Qual √© o animal mais antigo do mundo? A zebra, porque ela √© preta e branca!"
        ],
        'filme': [
            'Ah, sim! Qual filme voc√™ est√° pensando em ver? Tenho algumas sugest√µes se quiser!',
            'Filme √© sempre uma boa pedida! Me diz o que voc√™ gosta de assistir.',
            'Adoro um bom filme! Qual g√™nero voc√™ curte mais?',
            'J√° viu algum filme bom ultimamente? Me indica um!'
        ],
        'cinema': [
            'Cinema √© uma √≥tima ideia! Tem algum g√™nero que voc√™ prefere?',
            'Adoro ir ao cinema! Qual filme est√° em cartaz que te interessa?',
            'Pipoca e cinema, combina√ß√£o perfeita! Qual a boa de hoje!'
        ],
        'link': [
            'O link √© esse: [link fict√≠cio]. Me diz o que achou depois! Mal posso esperar pra saber sua opini√£o.',
            'Aqui est√° o link: [link fict√≠cio]. Espero que seja √∫til!',
            'Consegui o link! √â [link fict√≠cio]. D√° uma olhada l√°!',
            'Prontinho, o link √© [link fict√≠cio]. Qualquer coisa me avisa!'
        ],
        'marcar': [
            'Perfeito! Me avisa o dia e a hora que fica bom para voc√™. Podemos ver um filme ou s√≥ bater um papo.',
            '√ìtimo! Que dia e hora seriam bons para voc√™?',
            'Combinado! Qual dia e hor√°rio funcionam melhor pra voc√™?',
            'Bora marcar! Me fala sua disponibilidade.'
        ],
        'fim de semana': [
            'Sim! O que voc√™ tem em mente para o fim de semana? Adoro planejar algo divertido!',
            'O fim de semana est√° chegando! Algum plano especial?',
            'Fim de semana √© tudo de bom! O que voc√™ vai aprontar?',
            'Ansioso(a) para o fim de semana? O que vai fazer de bom?'
        ],
        'legal': [
            'Que bom que achou legal!', 'Fico feliz que tenha gostado!', 'N√©?!', 'Demais!',
            'Pois √©!', 'Concordo!', 'Massa!'
        ],
        'foto': [
            'Sim, enviei uma foto nova! Gostou? √â do meu √∫ltimo projeto.',
            'Mandei uma foto sim! Me diz o que achou.',
            'Chegou a foto? Espero que goste!',
            'Tirei uma foto agora, quer ver?'
        ],
        'projeto': [
            'Ah, o projeto! Estou trabalhando em uma nova funcionalidade que vai ser bem legal. Quer saber mais?',
            'O projeto est√° a todo vapor! Em breve teremos novidades.',
            'O projeto t√° dando trabalho, mas vai ficar incr√≠vel!',
            'Foco total no projeto! E voc√™, algum projeto novo?'
        ],
        'novidade': [
            'Sempre tem novidade por aqui! E voc√™, alguma coisa boa pra contar?',
            'Novidades? Sempre! E por a√≠, o que de bom?',
            'A vida √© cheia de novidades, n√©? Qual a sua mais recente?'
        ],
        'musica': [
            'M√∫sica √© sempre bom! Qual som voc√™ tem escutado ultimamente?',
            'M√∫sica √© vida! Qual a sua playlist do momento?',
            'Me indica uma m√∫sica boa! T√¥ precisando de novidades.',
            'Qual sua banda/artista favorito(a)?'
        ],
        'jogos': [
            'Jogos! Esse √© o forte. Tem algum jogo novo que voc√™ est√° de olho?',
            'Adoro jogos! Qual voc√™ tem jogado ultimamente?',
            'Bora jogar alguma coisa? Qual seu jogo preferido?',
            'Qual seu console favorito?'
        ],
        'o que vai fazer hoje': [
            "Ah, nada demais, s√≥ relaxar. E voc√™?", "Tenho umas coisas pra resolver, mas nada muito s√©rio. E voc√™, o que vai fazer?",
            "Ainda n√£o sei, t√¥ pensando em algo legal. Alguma sugest√£o?", "T√¥ pensando em maratonar uma s√©rie. E voc√™?"
        ],
        'quais seus planos': [
            "Por enquanto, s√≥ curtir. E os seus?", "Meus planos s√£o bem tranquilos hoje. E os seus?",
            "Ainda t√¥ decidindo, a vida √© cheia de possibilidades, n√©? Haha."
        ],
        'como foi seu dia': [
            "Foi tranquilo, e o seu?", "Bem corrido, mas consegui fazer tudo. E o seu?",
            "Normal, nada de muito emocionante. E o seu, como foi?", "Foi bom, obrigada por perguntar! E o seu?"
        ],
        'ta chovendo ai': [
            "Aqui t√° solz√£o! E a√≠?", "T√° nublado, mas sem chuva. E por a√≠?",
            "Chovendo um pouco, mas nada demais.", "Sim, t√° caindo uma chuvinha. E a√≠?"
        ],
        'como ta o tempo': [
            "Aqui t√° solz√£o! E a√≠?", "T√° nublado, mas sem chuva. E por a√≠?",
            "Chovendo um pouco, mas nada demais.", "O tempo t√° meio doido, n√©? Aqui t√° [sol/chuva/nublado]."
        ],
        'o que voce comeu': [
            "Ainda n√£o comi, t√¥ pensando no que fazer. E voc√™?", "J√° almocei/jantei, tava bom demais! E voc√™?",
            "Comi uma coisa simples, mas gostosa. E voc√™?"
        ],
        'ta com fome': [
            "T√¥ com uma fominha sim, pensando no que beliscar.", "Um pouco! E voc√™?",
            "N√£o muito, acabei de comer."
        ],
        'que massa': [
            "N√©?!", "Demais!", "Pois √©!", "Concordo!", "Massa mesmo!", "Muito bom!"
        ],
        'serio': [
            "S√©rio!", "Juro!", "Pode crer!", "Sim, de verdade!", "Ser√≠ssimo!"
        ],
        'jura': [
            "S√©rio!", "Juro!", "Pode crer!", "Sim, de verdade!", "Juro por tudo!"
        ],
        'nao acredito': [
            "Pois √©, acontece!", "Acredite!", "√â pra rir, n√©?", "Pode acreditar!"
        ],
        'me conta mais': [
            "O que voc√™ quer saber?", "Sobre o que?", "Pode perguntar!", "Estou ouvindo!"
        ],
        'o que voce acha': [
            "Hmm, dif√≠cil dizer...", "Acho que depende.", "Tenho que pensar um pouco.",
            "Minha opini√£o √© que...", "Acho que √© uma boa ideia!"
        ],
        'desculpa': [
            "De boa!", "Sem problemas!", "Relaxa!", "Tranquilo!", "Acontece!"
        ],
        'saudade': [
            "Eu tamb√©m!", "Muita!", "Que bom que lembrou!", "Saudade demais!"
        ],
        'e ai': [
            "Tudo certo?", "Na paz?", "Qual a boa?", "Tudo tranquilo?"
        ],
        'default': [
            "N√£o entendi ü§î", "Como assim?", "Pode repetir?", "N√£o peguei...",
            "H√£?", "Pode explicar melhor?", "Fala de novo, por favor.",
            "Desculpe, n√£o entendi o que voc√™ quis dizer.", "Poderia ser mais espec√≠fico?"
        ]
    },


    init() {
        // Carrega as conversas salvas no sessionStorage
        const salvas = JSON.parse(sessionStorage.getItem('todasConversas')) || {};
        // Mescla os dados dos amigos salvos com os dados padr√£o, garantindo a estrutura
        for (const id in this.amigos) {
            if (salvas[id]) {
                this.amigos[id] = { ...this.amigos[id], ...salvas[id], messages: salvas[id].messages || [] };
            }
        }
        this.cacheDOMElements(); // Garante que os elementos DOM sejam armazenados em cache
        this.renderEmojiPicker(); // <--- CHAME AQUI PRIMEIRO
        this.renderizarListaAmigos(); // Renderiza a lista de amigos inicialmente
        this.addEventListeners();
    },

    cacheDOMElements() {
        this.messagesContainer = document.getElementById('message-area');
        this.messageInput = document.getElementById('chat-input');
        this.sendMessageBtn = document.getElementById('send-message-btn');
        this.emojiToggleBtn = document.getElementById('emoji-toggle-btn');
        this.emojiPicker = document.getElementById('emoji-picker'); // Agora √© o container principal
        
        if (this.emojiPicker) {
            this.closeEmojiPickerBtn = this.emojiPicker.querySelector('.close-emoji-picker-btn');
            this.emojiSearchInput = document.getElementById('emoji-search-input');
            this.emojiCategoriesNav = document.getElementById('emoji-categories-nav');
            this.emojiGridContainer = document.getElementById('emoji-grid-container');
        } else {
            console.error("ERRO: Elemento 'emoji-picker' n√£o encontrado no DOM. O seletor de emojis n√£o funcionar√°.");
        }

        this.chatWindow = document.getElementById('chat-window');
        this.chatPartnerImage = document.getElementById('chat-window-avatar');
        this.chatPartnerName = document.getElementById('chat-window-name');
        this.chatPartnerStatus = document.getElementById('chat-window-status');
        this.noChatSelectedMessage = document.getElementById('no-chat-selected-message');

        this.directMessagesList = document.getElementById('direct-messages-list');
        this.friendSearchInput = document.querySelector('.friends-sidebar .search-bar input[type="search"]');

        this.friendsHeaderTitle = document.getElementById('friends-header-title');

        this.typingIndicator = document.getElementById('typing-indicator');

        this.allFriendsModal = document.getElementById('all-friends-modal');
        this.modalOnlineFriendsList = document.getElementById('modal-online-friends-list');
        this.modalOfflineFriendsList = document.getElementById('modal-offline-friends-list');

        this.gifToggleBtn = document.getElementById('gif-toggle-btn');
        this.gifPickerModal = document.getElementById('gif-picker-modal');
        this.closeGifPickerBtn = document.getElementById('close-gif-picker');
        this.gifSearchInput = document.getElementById('gif-search-input');
        this.gifResultsContainer = document.getElementById('gif-results-container');
        this.gifLoadingMessage = document.getElementById('gif-loading-message');
        this.gifNoResultsMessage = document.getElementById('gif-no-results-message');

        // Refer√™ncias para anexar arquivos
        this.fileAttachmentBtn = document.getElementById('file-attachment-btn');
        this.fileAttachmentInput = document.getElementById('file-attachment-input');

        // Refer√™ncias para o menu de op√ß√µes do chat e modal de confirma√ß√£o
        this.moreOptionsBtn = document.getElementById('more-options-btn');
        this.chatOptionsMenu = document.getElementById('chat-options-menu');
        this.clearChatBtn = document.getElementById('clear-chat-btn');
        this.clearChatConfirmationModal = document.getElementById('clear-chat-confirmation-modal');
        this.confirmClearChatBtn = document.getElementById('confirm-clear-chat-btn');
        this.cancelClearChatBtn = document.getElementById('cancel-clear-chat-btn');
        this.clearChatConfirmModalCloseBtn = document.getElementById('clear-chat-confirm-modal-close-btn');

        // NOVO: Refer√™ncias para mensagem de voz
        this.voiceMessageBtn = document.getElementById('voice-message-btn');
        this.voiceRecordingIndicator = document.getElementById('voice-recording-indicator');
        this.recordingTimerDisplay = document.getElementById('recording-timer');
    },

    addEventListeners() {
        // Event listener para o t√≠tulo "Amigos"
        if (this.friendsHeaderTitle) {
            this.friendsHeaderTitle.addEventListener('click', () => {
                this.resetChatView();
            });
        }

        // Event listener para o bot√£o de enviar mensagem
        if (this.sendMessageBtn) {
            this.sendMessageBtn.onclick = () => {
                const texto = this.messageInput.value.trim();
                console.log("Tentando enviar mensagem. Texto:", texto, "ID do Amigo Ativo:", this.amigoAtivoId); // Log de depura√ß√£o

                if (!this.amigoAtivoId) {
                    console.error("Nenhum amigo ativo selecionado. Mensagem n√£o enviada. Por favor, clique em um amigo na barra lateral para iniciar uma conversa.");
                    return;
                }

                if (!texto) { // Verifica se o texto est√° realmente vazio ap√≥s o trim
                    console.warn("O texto da mensagem est√° vazio. N√£o enviando.");
                    return;
                }

                // N√£o verifica mais se √© URL de GIF aqui, pois o GIF √© enviado pelo picker
                this.adicionarMensagem(this.amigoAtivoId, texto, 'sent', 'sent', 'text');
                
                this.messageInput.value = '';
                if (this.emojiPicker) this.emojiPicker.classList.add('hidden');

                const sentMessageIndex = this.amigos[this.amigoAtivoId].messages.length - 1;

                // Atraso para "delivered"
                setTimeout(() => {
                    if (this.amigos[this.amigoAtivoId].messages[sentMessageIndex].contentType === 'text') {
                        this.atualizarMensagem(this.amigoAtivoId, sentMessageIndex, texto, 'sent', 'delivered');
                    }
                }, 500); // 0.5 segundos para Delivered

                if (this.typingIndicator) {
                    const currentFriend = this.amigos[this.amigoAtivoId];
                    if (currentFriend) {
                        this.typingIndicator.querySelector('.typing-avatar').src = currentFriend.avatar;
                    }
                    this.typingIndicator.classList.remove('hidden');
                }
                this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;

                // Atraso para resposta do bot e "read"
                setTimeout(() => {
                    const resposta = this.gerarResposta(texto);
                    if (this.typingIndicator) this.typingIndicator.classList.add('hidden');

                    this.adicionarMensagem(this.amigoAtivoId, resposta, 'received', 'read', 'text'); // Respostas do bot s√£o sempre texto

                    if (this.amigos[this.amigoAtivoId].messages[sentMessageIndex].contentType === 'text') {
                        this.atualizarMensagem(this.amigoAtivoId, sentMessageIndex, texto, 'sent', 'read');
                    }
                    this.tocarSom();
                }, 2500); // 2.5 segundos para resposta do bot e Read
            };
        }

        // Event listener para enviar mensagem ao pressionar Enter
        if (this.messageInput) {
            this.messageInput.addEventListener('keypress', e => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    this.sendMessageBtn.click();
                }
            });
        }

        // Event listener para a pesquisa de amigos
        if (this.friendSearchInput) {
            this.friendSearchInput.addEventListener('input', (event) => {
                this.renderizarListaAmigos(event.target.value);
            });
        }

        // L√≥gica para o NOVO Emoji Picker
        if (this.emojiToggleBtn && this.emojiPicker) {
            this.emojiToggleBtn.addEventListener('click', (e) => {
                console.log("Emoji toggle button clicked!"); // Log para verificar o clique
                e.stopPropagation();
                this.emojiPicker.classList.toggle('hidden');
                if (!this.emojiPicker.classList.contains('hidden')) {
                    if (this.gifPickerModal) this.gifPickerModal.classList.add('hidden'); // Fecha o GIF picker
                    if (this.voiceRecordingIndicator) this.voiceRecordingIndicator.classList.add('hidden'); // Esconde o indicador de voz
                    if (this.emojiSearchInput) this.emojiSearchInput.value = ''; // Limpa a busca
                    this.filterEmojis(''); // Reseta o filtro
                }
            });

            if (this.closeEmojiPickerBtn) { // Verifica√ß√£o adicional
                this.closeEmojiPickerBtn.addEventListener('click', () => this.emojiPicker.classList.add('hidden'));
            }

            document.addEventListener('click', (e) => {
                if (this.emojiPicker && !this.emojiPicker.contains(e.target) && e.target !== this.emojiToggleBtn) {
                    this.emojiPicker.classList.add('hidden');
                }
            });

            if (this.emojiSearchInput) { // Verifica√ß√£o adicional
                this.emojiSearchInput.addEventListener('input', (e) => this.filterEmojis(e.target.value));
            }

            if (this.emojiGridContainer) { // Verifica√ß√£o adicional
                this.emojiGridContainer.addEventListener('click', (e) => {
                    const emojiBtn = e.target.closest('.emoji-btn');
                    if (emojiBtn) {
                        const emoji = emojiBtn.textContent;
                        const start = this.messageInput.selectionStart;
                        const end = this.messageInput.selectionEnd;
                        this.messageInput.value = this.messageInput.value.substring(0, start) + emoji + this.messageInput.value.substring(end);
                        this.messageInput.focus();
                        this.messageInput.selectionEnd = start + emoji.length;
                        this.emojiPicker.classList.add('hidden');
                        this.sendMessageBtn.click(); // Envia a mensagem com o emoji
                    }
                });
            }
        } else {
            console.warn("Bot√£o de emoji ou seletor de emojis n√£o encontrados. A funcionalidade de emoji pode estar desabilitada.");
        }

        // Event listeners para o GIF Picker
        if (this.gifToggleBtn && this.gifPickerModal) {
            this.gifToggleBtn.addEventListener('click', () => this.openGifPicker());
            if (this.closeGifPickerBtn) { // Verifica√ß√£o adicional
                this.closeGifPickerBtn.addEventListener('click', () => this.closeGifPicker());
            }
            this.gifPickerModal.addEventListener('click', (e) => {
                if (e.target === this.gifPickerModal) { // Fecha se clicar fora do conte√∫do
                    this.closeGifPicker();
                }
            });
            // Debounce para a busca de GIFs
            let searchTimeout;
            if (this.gifSearchInput) { // Verifica√ß√£o adicional
                this.gifSearchInput.addEventListener('input', (e) => {
                    clearTimeout(searchTimeout);
                    searchTimeout = setTimeout(() => {
                        this.fetchGifs(e.target.value);
                    }, 500); // Atraso de 500ms para come√ßar a buscar
                });
            }
            if (this.gifResultsContainer) { // Verifica√ß√£o adicional
                this.gifResultsContainer.addEventListener('click', (e) => this.handleGifSelection(e));
            }
        }

        // Event listeners para anexar arquivos
        if (this.fileAttachmentBtn) {
            this.fileAttachmentBtn.addEventListener('click', () => {
                this.fileAttachmentInput.click();
            });
        }

        if (this.fileAttachmentInput) {
            this.fileAttachmentInput.addEventListener('change', (e) => this.handleFileAttachment(e));
        }

        // L√≥gica para o menu de op√ß√µes do chat (tr√™s pontinhos)
        if (this.moreOptionsBtn && this.chatOptionsMenu) {
            this.moreOptionsBtn.addEventListener('click', (e) => {
                e.stopPropagation(); // Impede que o clique se propague para o document
                this.chatOptionsMenu.classList.toggle('hidden');
            });

            // Fecha o menu se clicar fora dele
            document.addEventListener('click', (e) => {
                if (this.chatOptionsMenu && !this.chatOptionsMenu.contains(e.target) && e.target !== this.moreOptionsBtn) {
                    this.chatOptionsMenu.classList.add('hidden');
                }
            });
        }

        // L√≥gica para o bot√£o "Limpar Conversa" e modal de confirma√ß√£o
        if (this.clearChatBtn) {
            this.clearChatBtn.addEventListener('click', () => {
                this.chatOptionsMenu.classList.add('hidden'); // Esconde o menu de op√ß√µes
                this.openClearChatConfirmationModal();
            });
        }

        if (this.confirmClearChatBtn) {
            this.confirmClearChatBtn.addEventListener('click', () => this.clearActiveChat());
        }

        if (this.cancelClearChatBtn) {
            this.cancelClearChatBtn.addEventListener('click', () => this.closeClearChatConfirmationModal());
        }

        if (this.clearChatConfirmModalCloseBtn) {
            this.clearChatConfirmModalCloseBtn.addEventListener('click', () => this.closeClearChatConfirmationModal());
        }

        if (this.clearChatConfirmationModal) {
            this.clearChatConfirmationModal.addEventListener('click', (e) => {
                if (e.target === this.clearChatConfirmationModal) {
                    this.closeClearChatConfirmationModal();
                }
            });
        }

        // NOVO: Event listeners para mensagem de voz
        if (this.voiceMessageBtn) {
            // MOUSE EVENTS
            this.voiceMessageBtn.addEventListener('mousedown', (e) => this.startVoiceRecording(e));
            document.addEventListener('mouseup', (e) => this.stopVoiceRecording(e));

            // TOUCH EVENTS for mobile
            this.voiceMessageBtn.addEventListener('touchstart', (e) => this.startVoiceRecording(e), { passive: false });
            document.addEventListener('touchend', (e) => this.stopVoiceRecording(e));
        }
    },

    // NOVO: Fun√ß√£o para resetar a visualiza√ß√£o do chat
    resetChatView() {
        document.querySelectorAll('.friend-item').forEach(item => {
            item.classList.remove('active');
        });
        this.amigoAtivoId = null; // Reseta o amigo ativo
        this.chatWindow.classList.add('hidden'); // Esconde a janela de chat
        this.noChatSelectedMessage.classList.remove('hidden'); // Mostra a mensagem de sele√ß√£o
        this.messagesContainer.innerHTML = ''; // Limpa as mensagens
    },

    // Fun√ß√£o para renderizar a lista de amigos na sidebar principal (Mensagens Diretas)
    renderizarListaAmigos(filtro = '') {
        this.directMessagesList.innerHTML = ''; // Limpa a lista de mensagens diretas

        // Apenas Ana e Carlos aparecer√£o na lista de Mensagens Diretas, com seus status fixos
        const amigosParaDM = ['ana', 'carlos'];

        amigosParaDM.forEach(id => {
            const amigo = this.amigos[id];
            const lowerCaseName = amigo.name.toLowerCase();

            if (filtro === '' || lowerCaseName.includes(filtro.toLowerCase())) {
                const friendItem = document.createElement('li');
                friendItem.classList.add('friend-item');
                friendItem.dataset.friendId = id;

                // Adiciona a classe 'active' se for o amigo ativo
                if (id === this.amigoAtivoId) {
                    friendItem.classList.add('active');
                }

                // Determina o status a ser exibido
                let statusDotClass = '';
                let statusTextContent = '';

                if (amigo.status === 'online') {
                    statusDotClass = 'status-online';
                    statusTextContent = 'Online';
                } else {
                    statusDotClass = 'status-offline';
                    statusTextContent = amigo.lastSeen; // Usa o "Visto por √∫ltimo" para offline
                }

                friendItem.innerHTML = `
                    <img src="${amigo.avatar}" alt="Avatar de ${amigo.name}" class="friend-avatar">
                    <div class="friend-details">
                        <span class="friend-name">${amigo.name}</span>
                        <span class="friend-status">
                            <span class="friend-status-dot ${statusDotClass}"></span>
                            ${statusTextContent}
                        </span>
                    </div>
                `;

                friendItem.addEventListener('click', () => {
                    this.selecionarAmigo(id);
                });

                this.directMessagesList.appendChild(friendItem);
            }
        });
    },

    // NOVO: Fun√ß√£o para renderizar a lista de todos os amigos no modal
    renderAllFriendsInModal() {
        if (!this.modalOnlineFriendsList || !this.modalOfflineFriendsList) return;

        this.modalOnlineFriendsList.innerHTML = '';
        this.modalOfflineFriendsList.innerHTML = '';

        for (const id in this.amigos) {
            const amigo = this.amigos[id];
            const friendItem = document.createElement('li');
            friendItem.classList.add('modal-friend-item');
            friendItem.dataset.friendId = id;

            let statusDotClass = '';
            let statusTextContent = '';

            if (amigo.status === 'online') {
                statusDotClass = 'status-online';
                statusTextContent = 'Online';
            } else {
                statusDotClass = 'status-offline';
                statusTextContent = amigo.lastSeen;
            }

            friendItem.innerHTML = `
                <img src="${amigo.avatar}" alt="Avatar de ${amigo.name}" class="modal-friend-avatar">
                <div class="friend-details">
                    <span class="modal-friend-name">${amigo.name}</span>
                    <span class="modal-friend-status">
                        <span class="modal-friend-status-dot ${statusDotClass}"></span>
                        ${statusTextContent}
                    </span>
                </div>
            `;

            friendItem.addEventListener('click', () => {
                this.selecionarAmigo(id);
                this.allFriendsModal.classList.add('hidden'); // Fecha o modal ao selecionar um amigo
            });

            if (amigo.status === 'online' || amigo.status === 'away' || amigo.status === 'dnd') {
                this.modalOnlineFriendsList.appendChild(friendItem);
            } else {
                this.modalOfflineFriendsList.appendChild(friendItem);
            }
        }
    },


    // Fun√ß√£o para selecionar um amigo e exibir o chat
    selecionarAmigo(id) {
        // Remove a classe 'active' de todos os amigos
        document.querySelectorAll('.friend-item').forEach(item => {
            item.classList.remove('active');
        });

        // Adiciona a classe 'active' ao amigo clicado
        const selectedFriendItem = document.querySelector(`.friend-item[data-friend-id="${id}"]`);
        if (selectedFriendItem) {
            selectedFriendItem.classList.add('active');
        }

        this.amigoAtivoId = id;
        const amigoAtivo = this.amigos[this.amigoAtivoId];

        // Atualiza o cabe√ßalho do chat
        this.chatPartnerName.textContent = amigoAtivo.name;
        this.chatPartnerImage.src = amigoAtivo.avatar;
        // Atualiza o status no cabe√ßalho do chat
        this.chatPartnerStatus.textContent = amigoAtivo.status === 'online' ? 'Online' : amigoAtivo.lastSeen;

        // Mostra a janela de chat e esconde a mensagem "Selecione um amigo"
        this.chatWindow.classList.remove('hidden');
        this.noChatSelectedMessage.classList.add('hidden');

        // Marca todas as mensagens recebidas como lidas ao selecionar a conversa
        if (this.amigos[this.amigoAtivoId] && this.amigos[this.amigoAtivoId].messages) {
            this.amigos[this.amigoAtivoId].messages.forEach(msg => {
                if (msg.tipo === 'received' && msg.status !== 'read') {
                    msg.status = 'read';
                }
            });
            sessionStorage.setItem('todasConversas', JSON.stringify(this.amigos));
        }

        this.renderizarMensagens(); // Renderiza as mensagens do amigo ativo
    },

    // Fun√ß√£o para renderizar as mensagens na janela de chat
    renderizarMensagens() {
        if (!this.messagesContainer) return;
        this.messagesContainer.innerHTML = '';

        if (this.amigoAtivoId && this.amigos[this.amigoAtivoId] && this.amigos[this.amigoAtivoId].messages) {
            this.amigos[this.amigoAtivoId].messages.forEach(m => {
                const div = document.createElement('div');
                div.className = `message ${m.tipo}`;

                if (m.contentType === 'gif') {
                    div.classList.add('gif-message');
                    const img = document.createElement('img');
                    img.src = m.texto; // A URL do GIF √© o 'texto'
                    img.alt = 'GIF';
                    div.appendChild(img);
                } else if (m.contentType === 'image') {
                    div.classList.add('image-message');
                    const img = document.createElement('img');
                    img.src = m.texto;
                    img.alt = 'Imagem anexada';
                    div.appendChild(img);
                } else if (m.contentType === 'video') {
                    div.classList.add('video-message');
                    const video = document.createElement('video');
                    video.src = m.texto;
                    video.controls = true;
                    video.autoplay = false; // N√£o auto-play para evitar sobrecarga
                    video.loop = false;
                    video.muted = true; // Come√ßa mutado
                    div.appendChild(video);
                } else if (m.contentType === 'voice') { // NOVO: Renderiza mensagem de voz
                    div.classList.add('voice-message');
                    const icon = document.createElement('i');
                    icon.classList.add('fa-solid', 'fa-microphone-alt');
                    const textSpan = document.createElement('span');
                    textSpan.textContent = m.texto; // Ex: "Mensagem de Voz (0:15)"
                    div.appendChild(icon);
                    div.appendChild(textSpan);
                }
                else {
                    const p = document.createElement('p');
                    p.textContent = m.texto;
                    div.appendChild(p);
                }

                const timestampSpan = document.createElement('span');
                timestampSpan.classList.add('timestamp');
                timestampSpan.textContent = m.timestamp;
                div.appendChild(timestampSpan);

                // Status icons only for text messages
                if (m.tipo === 'sent' && m.contentType === 'text') {
                    const statusIcon = document.createElement('i');
                    statusIcon.classList.add('fas', 'message-status-icon');

                    if (m.status === 'sent') {
                        statusIcon.classList.add('fa-check', 'text-gray-400');
                    } else if (m.status === 'delivered') {
                        statusIcon.classList.add('fa-check-double', 'text-gray-400');
                    } else if (m.status === 'read') {
                        statusIcon.classList.add('fa-check-double', 'text-blue-500');
                    }
                    div.appendChild(statusIcon);
                }
                this.messagesContainer.appendChild(div);
            });
        }

        if (this.typingIndicator) {
            this.messagesContainer.appendChild(this.typingIndicator);
        }

        this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
    },

    // Fun√ß√£o para adicionar uma nova mensagem √† conversa
    adicionarMensagem(amigoId, texto, tipo, status = null, contentType = 'text') {
        if (!this.amigos[amigoId]) {
            this.amigos[amigoId] = { messages: [] };
        }
        if (tipo === 'sent' && status === null) {
            status = 'sent';
        }
        this.amigos[amigoId].messages.push({ texto, tipo, status, timestamp: this.getCurrentTime(), contentType });
        sessionStorage.setItem('todasConversas', JSON.stringify(this.amigos));
        this.renderizarMensagens();
        this.renderizarListaAmigos(); // Atualiza a lista para mostrar a √∫ltima mensagem
    },

    // Fun√ß√£o para atualizar uma mensagem existente
    atualizarMensagem(amigoId, index, novoTexto, novoTipo, novoStatus = null) {
        if (this.amigos[amigoId] && this.amigos[amigoId].messages && this.amigos[amigoId].messages[index]) {
            this.amigos[amigoId].messages[index].texto = novoTexto;
            this.amigos[amigoId].messages[index].tipo = novoTipo;
            if (novoStatus !== null) {
                this.amigos[amigoId].messages[index].status = novoStatus;
            }
            sessionStorage.setItem('todasConversas', JSON.stringify(this.amigos));
            this.renderizarMensagens();
            this.renderizarListaAmigos();
        }
    },

    // Fun√ß√£o para gerar respostas do bot com base no humor
    gerarResposta(texto) {
        let responsesDict;
        if (this.amigoAtivoId === 'ana') {
            responsesDict = this.anaResponses;
        } else if (this.amigoAtivoId === 'carlos') {
            responsesDict = this.carlosResponses; // Usar√° as respostas do Carlos
        }
        else {
            return "Desculpe, n√£o consigo conversar com este amigo.";
        }

        const lowerCaseMessage = texto.toLowerCase();
        let matchedResponse = responsesDict['default'];
        let applyHumor = true;

        const directResponseKeywords = ['bom dia', 'boa tarde', 'boa noite', 'oi', 'ola', 'tudo bem', 'como vai', 'obrigado', 'tchau', 'qual seu nome', 'estou bem', 'estou otimo', 'estou otima', 'to bem', 'to otimo', 'to otima', 'e vc', 'e voce', 'e tu'];


        for (const keyword in responsesDict) {
            if (lowerCaseMessage.includes(keyword)) {
                matchedResponse = responsesDict[keyword];
                if (directResponseKeywords.includes(keyword)) {
                    applyHumor = false;
                }
                break;
            }
        }

        let finalResponse = Array.isArray(matchedResponse) ? matchedResponse[Math.floor(Math.random() * matchedResponse.length)] : matchedResponse;

        if (applyHumor && this.amigoAtivoId === 'ana') {
            switch (this.humorAtual) {
                case 'engra√ßado':
                    finalResponse += " üòÇ";
                    break;
                case 'ranzinza':
                    finalResponse = "Aff... " + finalResponse.toLowerCase();
                    break;
            }
        }
        return finalResponse;
    },
    // Retorna a hora atual formatada (HH:MM)
    getCurrentTime() {
        const now = new Date();
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        return `${hours}:${minutes}`;
    },

    // --- L√≥gica do NOVO Emoji Picker ---
    renderEmojiPicker() {
        if (!this.emojiCategoriesNav || !this.emojiGridContainer) {
            console.error("Elementos do emoji picker n√£o encontrados. N√£o foi poss√≠vel renderizar o picker.");
            return;
        }

        this.emojiCategoriesNav.innerHTML = '';
        this.emojiGridContainer.innerHTML = '';

        for (const categoryKey in this.emojiData) {
            const category = this.emojiData[categoryKey];

            // Cria bot√£o de navega√ß√£o para a categoria
            const categoryBtn = document.createElement('button');
            categoryBtn.classList.add('emoji-category-btn');
            categoryBtn.dataset.category = categoryKey;
            categoryBtn.textContent = category.icon;
            categoryBtn.title = category.title;
            categoryBtn.addEventListener('click', () => this.scrollToEmojiCategory(categoryKey));
            this.emojiCategoriesNav.appendChild(categoryBtn);

            // Cria se√ß√£o de grade para a categoria
            const categorySection = document.createElement('div');
            categorySection.classList.add('emoji-category-section');
            categorySection.id = `emoji-category-${categoryKey}`;
            categorySection.innerHTML = `<h5>${category.title}</h5><div class="emoji-grid"></div>`;

            const emojiGrid = categorySection.querySelector('.emoji-grid');
            category.emojis.forEach(emoji => {
                const emojiBtn = document.createElement('button');
                emojiBtn.classList.add('emoji-btn');
                emojiBtn.textContent = emoji;
                emojiGrid.appendChild(emojiBtn);
            });
            this.emojiGridContainer.appendChild(categorySection);
        }
    },

    filterEmojis(query) {
        if (!this.emojiGridContainer) return; // Adicionado null check

        const lowerCaseQuery = query.toLowerCase();
        const allEmojiSections = this.emojiGridContainer.querySelectorAll('.emoji-category-section');

        allEmojiSections.forEach(section => {
            let sectionHasVisibleEmojis = false;
            const emojisInGrid = section.querySelectorAll('.emoji-btn');
            emojisInGrid.forEach(emojiBtn => {
                const emojiText = emojiBtn.textContent;
                // Para busca, podemos usar uma biblioteca de busca de emojis se for mais complexo,
                // mas para este exemplo, uma busca simples por texto funciona.
                // A maioria dos emojis n√£o tem "nomes" no texto, ent√£o a busca ser√° limitada.
                // Uma melhoria seria ter um mapeamento de emoji para palavras-chave.
                const isMatch = emojiText.includes(lowerCaseQuery) || (query === '' && true); // Mostra tudo se a busca estiver vazia

                emojiBtn.style.display = isMatch ? 'block' : 'none';
                if (isMatch) {
                    sectionHasVisibleEmojis = true;
                }
            });

            // Mostra ou esconde a se√ß√£o inteira se n√£o houver emojis correspondentes
            section.style.display = sectionHasVisibleEmojis ? 'block' : 'none';
        });
    },

    scrollToEmojiCategory(categoryKey) {
        if (!this.emojiGridContainer || !this.emojiCategoriesNav) return; // Adicionado null check

        const targetElement = document.getElementById(`emoji-category-${categoryKey}`);
        if (targetElement) {
            this.emojiGridContainer.scrollTop = targetElement.offsetTop - this.emojiGridContainer.offsetTop;
            // Atualiza o estado ativo do bot√£o de categoria
            this.emojiCategoriesNav.querySelectorAll('.emoji-category-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            const activeCategoryBtn = document.querySelector(`.emoji-category-btn[data-category="${categoryKey}"]`);
            if (activeCategoryBtn) { // Adicionado null check
                activeCategoryBtn.classList.add('active');
            }
        }
    },

    // --- L√≥gica do GIF Picker (NOVO) ---
    openGifPicker() {
        if (this.gifPickerModal) {
            this.gifPickerModal.classList.remove('hidden');
            if (this.emojiPicker) this.emojiPicker.classList.add('hidden'); // Fecha o emoji picker se o GIF picker for aberto
            if (this.voiceRecordingIndicator) this.voiceRecordingIndicator.classList.add('hidden'); // Esconde o indicador de voz
            if (this.gifSearchInput) this.gifSearchInput.value = ''; // Limpa a busca anterior
            if (this.gifResultsContainer) this.gifResultsContainer.innerHTML = ''; // Limpa resultados anteriores
            if (this.gifNoResultsMessage) this.gifNoResultsMessage.classList.add('hidden');
            if (this.gifLoadingMessage) this.gifLoadingMessage.classList.add('hidden');
            this.fetchGifs('trending'); // Carrega GIFs em alta ao abrir
        }
    },

    closeGifPicker() {
        if (this.gifPickerModal) {
            this.gifPickerModal.classList.add('hidden');
        }
    },

    async fetchGifs(query) {
        if (!this.GIPHY_API_KEY || this.GIPHY_API_KEY === 'YOUR_GIPHY_API_KEY') {
            console.error("Giphy API Key n√£o configurada. Por favor, obtenha uma chave em developers.giphy.com e substitua 'YOUR_GIPHY_API_KEY' no main.js.");
            if (this.gifResultsContainer) this.gifResultsContainer.innerHTML = '';
            if (this.gifNoResultsMessage) {
                this.gifNoResultsMessage.textContent = "Erro: Chave da API do Giphy n√£o configurada.";
                this.gifNoResultsMessage.classList.remove('hidden');
            }
            if (this.gifLoadingMessage) this.gifLoadingMessage.classList.add('hidden');
            return;
        }

        if (this.gifResultsContainer) this.gifResultsContainer.innerHTML = '';
        if (this.gifNoResultsMessage) this.gifNoResultsMessage.classList.add('hidden');
        if (this.gifLoadingMessage) this.gifLoadingMessage.classList.remove('hidden');

        const endpoint = query === 'trending' ?
            `https://api.giphy.com/v1/gifs/trending?api_key=${this.GIPHY_API_KEY}&limit=20` :
            `https://api.giphy.com/v1/gifs/search?api_key=${this.GIPHY_API_KEY}&q=${encodeURIComponent(query)}&limit=20`;

        try {
            const response = await fetch(endpoint);
            const data = await response.json();

            if (this.gifLoadingMessage) this.gifLoadingMessage.classList.add('hidden');

            if (data.data && data.data.length > 0) {
                this.renderGifs(data.data);
            } else {
                if (this.gifNoResultsMessage) {
                    this.gifNoResultsMessage.textContent = "Nenhum GIF encontrado para sua busca.";
                    this.gifNoResultsMessage.classList.remove('hidden');
                }
            }
        } catch (error) {
            console.error("Erro ao buscar GIFs:", error);
            if (this.gifLoadingMessage) this.gifLoadingMessage.classList.add('hidden');
            if (this.gifNoResultsMessage) {
                this.gifNoResultsMessage.textContent = "Erro ao carregar GIFs. Tente novamente mais tarde.";
                this.gifNoResultsMessage.classList.remove('hidden');
            }
        }
    },

    renderGifs(gifs) {
        if (!this.gifResultsContainer) return; // Adicionado null check

        this.gifResultsContainer.innerHTML = '';
        gifs.forEach(gif => {
            // Usamos 'downsized_medium' para uma vers√£o mais leve do GIF para exibi√ß√£o na grade
            const gifUrl = gif.images.downsized_medium.url;
            const gifItem = document.createElement('img');
            gifItem.classList.add('gif-item');
            gifItem.src = gifUrl;
            gifItem.alt = gif.title || 'GIF';
            gifItem.dataset.gifUrl = gif.images.original.url; // Salva a URL original para o envio
            this.gifResultsContainer.appendChild(gifItem);
        });
    },

    handleGifSelection(event) {
        const selectedGif = event.target.closest('.gif-item');
        if (selectedGif) {
            const gifUrl = selectedGif.dataset.gifUrl;
            if (this.amigoAtivoId) {
                this.adicionarMensagem(this.amigoAtivoId, gifUrl, 'sent', 'sent', 'gif');
                this.closeGifPicker();
            }
        }
    },

    // Fun√ß√£o para lidar com o anexo de arquivos (imagens e v√≠deos)
    handleFileAttachment(event) {
        const file = event.target.files[0];
        if (!file || !this.amigoAtivoId) return;

        const reader = new FileReader();
        reader.onload = (e) => {
            const fileUrl = e.target.result;
            let contentType = '';

            if (file.type.startsWith('image/')) {
                contentType = 'image';
            } else if (file.type.startsWith('video/')) {
                contentType = 'video';
            } else {
                console.warn('Tipo de arquivo n√£o suportado para anexo:', file.type);
                return;
            }

            this.adicionarMensagem(this.amigoAtivoId, fileUrl, 'sent', 'sent', contentType);
            // Limpa o input de arquivo para permitir o upload do mesmo arquivo novamente
            event.target.value = ''; 
        };
        reader.readAsDataURL(file);
    },

    // Fun√ß√µes para limpar o chat
    openClearChatConfirmationModal() {
        if (this.clearChatConfirmationModal) {
            this.clearChatConfirmationModal.classList.remove('hidden');
        }
    },

    closeClearChatConfirmationModal() {
        if (this.clearChatConfirmationModal) {
            this.clearChatConfirmationModal.classList.add('hidden');
        }
    },

    clearActiveChat() {
        if (this.amigoAtivoId && this.amigos[this.amigoAtivoId]) {
            this.amigos[this.amigoAtivoId].messages = []; // Limpa o array de mensagens
            sessionStorage.setItem('todasConversas', JSON.stringify(this.amigos)); // Salva no sessionStorage
            this.renderizarMensagens(); // Re-renderiza a √°rea de mensagens (ficar√° vazia)
            this.closeClearChatConfirmationModal(); // Fecha o modal de confirma√ß√£o
            console.log(`Chat com ${this.amigos[this.amigoAtivoId].name} limpo.`);
        }
    },

    // NOVO: L√≥gica para Mensagens de Voz Simuladas
    startVoiceRecording(e) {
        // Previne o comportamento padr√£o do touch para evitar scroll
        if (e.type === 'touchstart') {
            e.preventDefault();
        }
        
        if (!this.amigoAtivoId) {
            console.warn("Nenhum amigo ativo selecionado para gravar mensagem de voz.");
            return;
        }

        this.isRecordingVoice = true;
        this.recordingStartTime = Date.now();
        if (this.voiceMessageBtn) this.voiceMessageBtn.classList.add('recording');
        if (this.voiceRecordingIndicator) this.voiceRecordingIndicator.classList.remove('hidden');
        if (this.messageInput) this.messageInput.disabled = true; // Desabilita o input de texto
        if (this.sendMessageBtn) this.sendMessageBtn.disabled = true; // Desabilita o bot√£o de enviar texto

        // Esconde outros pickers
        if (this.emojiPicker) this.emojiPicker.classList.add('hidden');
        if (this.gifPickerModal) this.gifPickerModal.classList.add('hidden');

        // Inicia o timer de grava√ß√£o
        let seconds = 0;
        if (this.recordingTimerDisplay) this.recordingTimerDisplay.textContent = '0:00';
        this.recordingInterval = setInterval(() => {
            seconds++;
            const minutes = Math.floor(seconds / 60);
            const remainingSeconds = seconds % 60;
            if (this.recordingTimerDisplay) this.recordingTimerDisplay.textContent = `${minutes}:${String(remainingSeconds).padStart(2, '0')}`;
        }, 1000);
    },

    stopVoiceRecording(e) {
        if (!this.isRecordingVoice) return;

        // Previne o comportamento padr√£o do touch
        if (e.type === 'touchend') {
            e.preventDefault();
        }

        this.isRecordingVoice = false;
        clearInterval(this.recordingInterval);
        if (this.voiceMessageBtn) this.voiceMessageBtn.classList.remove('recording');
        if (this.voiceRecordingIndicator) this.voiceRecordingIndicator.classList.add('hidden');
        if (this.messageInput) this.messageInput.disabled = false; // Habilita o input de texto
        if (this.sendMessageBtn) this.sendMessageBtn.disabled = false; // Habilita o bot√£o de enviar texto

        const recordingDuration = Math.floor((Date.now() - this.recordingStartTime) / 1000); // Dura√ß√£o em segundos

        if (recordingDuration > 0) { // Envia apenas se a grava√ß√£o durou mais de 0 segundos
            const minutes = Math.floor(recordingDuration / 60);
            const seconds = recordingDuration % 60;
            const formattedDuration = `${minutes}:${String(seconds).padStart(2, '0')}`;
            const messageText = `Mensagem de Voz (${formattedDuration})`;

            this.adicionarMensagem(this.amigoAtivoId, messageText, 'sent', 'sent', 'voice');

            // Simula a resposta do bot ap√≥s a mensagem de voz
            if (this.typingIndicator) {
                const currentFriend = this.amigos[this.amigoAtivoId];
                if (currentFriend) {
                    this.typingIndicator.querySelector('.typing-avatar').src = currentFriend.avatar;
                }
                this.typingIndicator.classList.remove('hidden');
            }
            if (this.messagesContainer) this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;

            setTimeout(() => {
                const resposta = this.gerarResposta("mensagem de voz"); // Usa uma keyword gen√©rica para a resposta do bot
                if (this.typingIndicator) this.typingIndicator.classList.add('hidden');
                this.adicionarMensagem(this.amigoAtivoId, resposta, 'received', 'read', 'text');
                this.tocarSom();
            }, 2500); // Atraso para a resposta do bot
        } else {
            console.log("Grava√ß√£o de voz muito curta, n√£o enviada.");
        }
    },

    // Adiciona um som ao receber uma mensagem (opcional)
    tocarSom() {
        // Voc√™ pode adicionar um elemento de √°udio no HTML e reproduzi-lo aqui
        // Ex: const audio = new Audio('caminho/para/seu/som.mp3'); audio.play();
        console.log("Som de mensagem recebida (simulado)");
    }
};

document.addEventListener('DOMContentLoaded', () => {
    Chat.init(); // Inicializa o objeto Chat quando o DOM estiver pronto
});
